using Pukaj.Properties;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Pukaj
{
    public enum DIFFICULTY
    {
        easy,
        medium,
        hard,
    }

    public enum NASOKA
    {
        LEVO, // za covece
        DESNO,// za covece
        GORE  // za strela
    }

    public partial class Form1 : Form
    {
        DIFFICULTY Difficulty = DIFFICULTY.easy;
        NASOKA Nasoka = NASOKA.DESNO;

        public int pominatoVreme = 0;
        public int TIME = 60;

        public List<Balloon> balloons;
        Balloon balonche;

        public Rectangle bound3;

        public Pen pen;
        SolidBrush RBojaNaBalon;
        SolidBrush groundColor;
        public Image covecheImage;

        public Graphics graphics;
        Bitmap doubleBuffer;

        Random r;
        Form2 forma;
        Color boja;

        public int level = 0;
        public int radius = 0;
        public int poeni = 0;
        public int brojac = 0;
        public int brPukanje = 0;
        public int flag = 0;
        public int brBaloniVoLevel = 0;
        public int LineWidth;
        public String Name2;

        public man covece;
        public topche topchence;
        public Image picMan;
        public int CoveceX { get; set; }
        public int CoveceY { get; set; }
        public int brojac1 = 255;
        public int brojac2 = 255;

        public int RandomX { get; set; }
        public int RandomY { get; set; }
        public int TopceX { get; set; }
        public int TopceY { get; set; }
        public Point randomPoint { get; set; }
        public Point topchePoint { get; set; }

        public Form1()
        {
            InitializeComponent();
            r = new Random();
            this.DoubleBuffered = true;
            doubleBuffer = new Bitmap(Width, Height);
            graphics = CreateGraphics();

            picMan = Resources.man;
            CoveceX = 300;
            CoveceY = 320;
            TopceX = 300;
            TopceY = 320;
            radius = 6;
            RandomX = r.Next(0, this.Bounds.Height / 2);
            RandomY = r.Next(0, this.Bounds.Width);
            randomPoint = new Point(RandomX, RandomY);
            topchePoint = new Point(TopceX, TopceY);
            boja = Color.Black;
            LineWidth = 1;
            Name2 = Name;

            covece = new man();
            topchence = new topche(topchePoint, radius);

            forma = new Form2();
            if (forma.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                level = forma.level;
            }

            timer1.Start();
            timer2.Start();

            balloons = new List<Balloon>();
            covecheImage = Resources.man;
            pen = new Pen(Color.AntiqueWhite);

            bound3 = new Rectangle(0, 25, this.Bounds.Width, (this.Bounds.Height / 2));

            r = new Random();

            Color Rboja = Color.FromArgb(r.Next(255), r.Next(255), r.Next(255));
            RBojaNaBalon = new SolidBrush(Rboja);


            /* balonche = new Balloon(Width / 2, Height / 2, 10, 10, (float)(Math.PI / 4), RBojaNaBalon);
             balonche.Bounds = bound3; 
            */

       /*     if (Difficulty == DIFFICULTY.easy)
            {
                balloons.Clear();
                for (int i = 0; i < 5; i++)
                {

                    balonche = new Balloon(r.Next(this.Bounds.Width) / 2, r.Next(this.Bounds.Height) / 2,20, 30, (float)(Math.PI / 4), RBojaNaBalon, randomPoint);
                    balloons.Add(balonche);
                    Show();
                }
            }

            else if (Difficulty == DIFFICULTY.medium)
            {
                balloons.Clear();
                for (int i = 0; i < 9; i++)
                {
                    balonche = new Balloon(r.Next(this.Bounds.Width) / 2, r.Next(this.Bounds.Height) / 2, 15, 40, (float)(Math.PI / 4), RBojaNaBalon, randomPoint);
                    balloons.Add(balonche);
                    Show();
                }
            }

            else if (Difficulty == DIFFICULTY.hard)
            {
                balloons.Clear();
                for (int i = 0; i < 14; i++)
                {

                    balonche = new Balloon(r.Next(this.Bounds.Width) / 2, r.Next(this.Bounds.Height) / 2, 10, 20, (float)(Math.PI / 4), RBojaNaBalon, randomPoint);
                    balloons.Add(balonche);
                    Show();
                }
            }
       */

            if (level == 1) //easy chosen
            {
                balloons.Clear();
                for (int i = 0; i < 5; i++)
                {
                    balonche = new Balloon(r.Next(this.Bounds.Width) / 2, r.Next(this.Bounds.Height) / 2, 20, 30, (float)(Math.PI / 4), RBojaNaBalon, randomPoint);
                    balloons.Add(balonche);
                    Show();
                }
            }

            else if (level == 2)
            {
                balloons.Clear();
                for (int i = 0; i < 9; i++)
                {
                    balonche = new Balloon(r.Next(this.Bounds.Width) / 2, r.Next(this.Bounds.Height) / 2, 15, 40, (float)(Math.PI / 4), RBojaNaBalon, randomPoint);
                    balloons.Add(balonche);
                    Show();
                }
            }

            else if (level == 3)
            {
                balloons.Clear();
                for (int i = 0; i < 14; i++)
                {
                    balonche = new Balloon(r.Next(this.Bounds.Width) / 2, r.Next(this.Bounds.Height) / 2, 10, 20, (float)(Math.PI / 4), RBojaNaBalon, randomPoint);
                    balloons.Add(balonche);
                    Show();
                }
            }

            Show();
            this.DoubleBuffered = true;
            Invalidate();

        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            Graphics g = Graphics.FromImage(doubleBuffer);
            // g.Clear(Color.White);
            /*g.DrawRectangle(pen, bound3);
            balonche.Draw(g);
            balonche.Move();*/
            g.DrawImageUnscaled(doubleBuffer, 0, 0);
           
            this.DrawObjects(graphics);
            if (pominatoVreme < TIME)
            {
                label1.Text = (TIME - pominatoVreme).ToString();
                pominatoVreme++;
                progressBar1.Value = TIME - pominatoVreme;
            }
            else
            {
                timer1.Stop();
                timer2.Stop();

                if (MessageBox.Show("Timeout! Choose OK if you want to continue with this game or CANCEL to exit", "Timeout", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.OK)
                {
                    forma = new Form2();
                    if (forma.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        level = forma.level;
                        Form1 f = new Form1();
                    }
                }
                else
                {
                    Close();
                }

            }

       
        }

        private void timerBlink_Tick(object sender, EventArgs e)
        {
            if (pominatoVreme >= 40)
            {
                if (progressBar1.ForeColor != Color.Red)
                    progressBar1.ForeColor = Color.Red;
                else progressBar1.ForeColor = Color.Yellow;
            }
        }

        private void changeGroundColor(Graphics g)
        {
            groundColor = new SolidBrush(Color.FromArgb(255, brojac1, brojac2));
            brojac1-=4; brojac2-=4;
            g.FillRectangle(groundColor, 0, this.Bounds.Height - this.Bounds.Height / 5, this.Bounds.Width, this.Bounds.Height / 4);
            if (brojac1 == 0 || brojac2 == 0)
            {
                brojac2 = 255;
                brojac1 = 255;
            }
        }


        private void DrawObjects(Graphics g)
        {
            g.Clear(Color.White);
            foreach (Balloon balonchence in balloons)
            {
                balonchence.Bounds = new Rectangle(0, 25, this.Bounds.Width, this.Bounds.Height / 2 - 35);
                balonchence.Draw(g); // go crta baloncheto
                balonchence.Move();
                graphics.DrawRectangle(pen, bound3);
                g.DrawImageUnscaled(covecheImage, CoveceX, CoveceY);
            }
            covece.Bounds = new Rectangle(0, 25, this.Bounds.Width, this.Bounds.Height / 2 - 35);
            changeGroundColor(g);
            topchence.Drawtopche(g);
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {

        }

    
        private void Form1_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Left)
            {
                Nasoka = NASOKA.LEVO;
                CoveceX -= 10;
                TopceX -= 10;
                topchence.MoveTopcheLevo();
                graphics.DrawImageUnscaled(covecheImage, CoveceX, CoveceY);

            }
            else if (e.KeyCode == Keys.Right)
            {
                Nasoka = NASOKA.DESNO;
                CoveceX += 10;
                TopceX += 10;
                topchence.MoveTopcheDesno();
                graphics.DrawImageUnscaled(covecheImage, CoveceX, CoveceY);

            }

        }

        private void Form1_MouseClick(object sender, MouseEventArgs e)
        {
            Point p1=new Point(e.X,e.Y);
            Point p2=new Point(CoveceX,CoveceY);
            Pen pn = new Pen(boja,LineWidth);

            graphics.DrawLine(pn,p1,p2);
            brPukanje++;
            if (level == 1)
            {
                timer1.Start();
                for (int i = 0; i < balloons.Count; i++)
                {
                    if (((e.X >= balloons[i].X - 15) && (e.X <= balloons[i].X)) ||
                        ((e.X <= balloons[i].X + 15) && (e.X >= balloons[i].X)) ||
                        (((e.Y >= balloons[i].Y - 15) && (e.Y <= balloons[i].Y)) ||
                        ((e.Y <= balloons[i].Y + 15) && (e.Y >= balloons[i].Y))))
                    {
                        balloons.RemoveAt(i);
                        poeni += 2;
                        brojac++;
                        label3.Text = brojac.ToString();
                        label2.Text = poeni.ToString();
                        break;
                    }
                }

                        if (brojac == 5)
                        {
                           
                            forma = new Form2();
                            timer1.Stop();
                            MessageBox.Show("LEVEL 1! Well done !Congratulations on passing this level! You managed to handle the balloons with " + brPukanje + " shoots!");
                           
                            if (MessageBox.Show("You may now proceed to a new level or do better on this one!", "Next level", MessageBoxButtons.OK, MessageBoxIcon.None) == System.Windows.Forms.DialogResult.OK)
                            {
                                /*if (forma.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                               {
                                 //  level = forma.level;
                                   
                                    Form1 f = new Form1();
                               }*/

                                this.Visible = false;
                             //   timer1.Stop();
                                Form1 f = new Form1();
                            }
                        }
                }
          


            else if (level == 2)
            {
                timer1.Start();
                brBaloniVoLevel = balloons.Count;
                for (int i = 0; i < balloons.Count; i++)
                {

                    if (((e.X >= balloons[i].X - 8) && (e.X <= balloons[i].X)) ||
                        ((e.X <= balloons[i].X + 8) && (e.X >= balloons[i].X)) ||
                        (((e.Y >= balloons[i].Y - 8) && (e.Y <= balloons[i].Y)) ||
                        ((e.Y <= balloons[i].Y + 8) && (e.Y >= balloons[i].Y))))
                    {
                        balloons.RemoveAt(i);
                        poeni += 3;
                        brojac++;
                        label3.Text = brojac.ToString();
                        label2.Text = poeni.ToString();
                        //break;
                    }

                   
                        if (brojac == 9)
                        {
                          
                            forma = new Form2();
                            timer1.Stop();
                            MessageBox.Show("LEVEL 2! Well done ! Congratulations on passing this level! You managed to handle the balloons with " + brPukanje + " shoots!");// You have earned " + poeni + " points!"); 
                         
                            if (MessageBox.Show("You may now proceed to a new level or do better on this one!", "Next level", MessageBoxButtons.OK, MessageBoxIcon.None) == System.Windows.Forms.DialogResult.OK) 
                            {
                              /*  if (forma.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                                {
                                   level = forma.level;
                                   
                                    Form1 f = new Form1();
                                }*/
                                this.Visible = false;
                                Form1 f = new Form1();
                            }
                        }
                }
            }

            else  if (level == 3)
            {
                 timer1.Start();
                brBaloniVoLevel = balloons.Count;
                for (int i = 0; i < balloons.Count; i++)
                {

                    if (((e.X >= balloons[i].X - 5) && (e.X <= balloons[i].X)) ||
                        ((e.X <= balloons[i].X + 5) && (e.X >= balloons[i].X)) ||
                        (((e.Y >= balloons[i].Y - 5) && (e.Y <= balloons[i].Y)) ||
                        ((e.Y <= balloons[i].Y + 5) && (e.Y >= balloons[i].Y))))
                    {
                        balloons.RemoveAt(i);
                        poeni += 5;
                        brojac++;
                        label3.Text = brojac.ToString();
                        label2.Text = poeni.ToString();
                      //  break;

                    }

                    
                        if (brojac == 14)
                        {
                            timer1.Stop();
                            MessageBox.Show("LEVEL 3! Well done" +forma.Name+ " ! Congratulations on passing this level! You managed to handle the balloons with " + brPukanje + " shoots!");// You have earned " + poeni + " points!"); 
                           
                            if (MessageBox.Show("You may now proceed to a new level or do better on this one!", "Next level", MessageBoxButtons.OK, MessageBoxIcon.None) == System.Windows.Forms.DialogResult.OK) 
                            {

                              /*  forma = new Form2();
                                if (forma.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                                {
                                    level = forma.level;
                                   
                                    Form1 f = new Form1();
                                }*/
                                this.Visible = true;
                                Form1 f = new Form1();
                            }
                        }
                }
            }


                }

        private void toolStripStatusLabel1_Paint(object sender, PaintEventArgs e)
        {
            toolStripStatusLabel1.Text = "#No of shots: " + brPukanje.ToString();
        }

        private void exitToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Close();
        }

      

        private void colorChangeToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            timer1.Stop();
            DialogResult rez = colorDialog1.ShowDialog();
          if (rez == System.Windows.Forms.DialogResult.OK)
            {
                boja = colorDialog1.Color;
                timer1.Start();
            }
          
        }

        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {
          LineWidth = int.Parse(numericUpDown1.Value.ToString());
        }

        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            timer1.Stop();
           
            Form1 f = new Form1();
        }
        }


            }
        
 

